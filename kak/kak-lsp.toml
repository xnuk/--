verbosity = 2
snippet_support = true

[server]
timeout = 1800

[[semantic_tokens]]
token = 'comment'
face = 'documentation'
modifiers = ['documentation']

[[semantic_tokens]]
token = 'comment'
face = 'comment'

[[semantic_tokens]]
token = 'function'
face = 'function'

[[semantic_tokens]]
token = 'keyword'
face = 'keyword'

[[semantic_tokens]]
token = 'namespace'
face = 'module'

[[semantic_tokens]]
token = 'operator'
face = 'operator'

[[semantic_tokens]]
token = 'string'
face = 'string'

[[semantic_tokens]]
token = 'type'
face = 'type'

[[semantic_tokens]]
token = 'variable'
face = 'default+d'
modifiers = ['readonly']

[[semantic_tokens]]
token = 'variable'
face = 'default+d'
modifiers = ['constant']

[[semantic_tokens]]
token = 'variable'
face = 'variable'

[language.tsx]
filetypes = ['typescript', 'javascript']
roots = ['deno.json', '.git']
command = 'sh'
args = ['-c', '''
toplevel=$(git rev-parse --show-toplevel 2>/dev/null || true)

if [ -f "$toplevel/deno.json" ]; then
	exec deno lsp
else
	exec typescript-language-server --stdio
fi
''']
[language.tsx.settings.deno]
enable = true
lint = true

[language.rust]
filetypes = ['rust']
roots = ['Cargo.toml', '.git']
# command = 'sh'
# args = ['-c', '''
# if path=$(rustup which rust-analyzer 2>/dev/null); then
# 	exec "$path"
# else
# 	rust-analyzer
# fi
# ''']
command = 'rust-analyzer'
settings_section = 'rust-analyzer'
[language.rust.settings.rust-analyzer]
hoverActions.enable = false
checkOnSave.command = 'clippy'

[language.haskell]
filetypes = ['haskell']
roots = ['Setup.hs', 'stack.yaml', '*.cabal', '.git']
command = 'haskell-language-server-wrapper'
args = [ '--lsp' ]
settings_section = 'haskell'

[language.haskell.settings.haskell]
haskell.formattingProvider = 'fourmolu'

[language.json]
filetypes = ['json']
roots = ['package.json']
command = 'vscode-json-languageserver'
args = ['--stdio']

[language.yaml]
filetypes = ['yaml']
roots = ['.git']
command = 'yaml-language-server'
args = ['--stdio']

[language.scss]
filetypes = ['scss']
roots = ['.git']
command = 'stylelint-lsp'
args = ['--stdio']

[language.crystal]
filetypes = ['crystal']
roots = ['.git', 'shard.yml', 'shard.yaml']
command = 'crystalline'

[language.python]
filetypes = ['python']
roots = ['requirements.txt', 'setup.py', 'setup.cfg', 'pyproject.toml', '.git']

# # try this on mypy v0.981
# command = 'pylsp'
# settings_section = '_'
# [language.python.settings._.pylsp.plugins]
# pycodestyle.enabled = true
# yapf.enabled = false
# mypy.enabled = true
# mypy.live_mode = true
# mypy.strict = true

command = 'pyright-langserver'
args = ['--stdio']

[language.java]
filetypes = ['java']
roots = ['.git', 'pom.xml']
command = 'java-language-server'
