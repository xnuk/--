verbosity = 2
snippet_support = true

[server]
timeout = 600

[semantic_tokens]
faces = [
    { face = 'documentation', token = 'comment', modifiers = [
        'documentation',
    ] },
    { face = 'comment', token = 'comment' },
    { face = 'function', token = 'function' },
    { face = 'keyword', token = 'keyword' },
    { face = 'module', token = 'namespace' },
    { face = 'operator', token = 'operator' },
    { face = 'string', token = 'string' },
    { face = 'type', token = 'type' },
    { face = 'default+d', token = 'variable', modifiers = [
        'readonly',
    ] },
    { face = 'default+d', token = 'variable', modifiers = [
        'constant',
    ] },
    { face = 'variable', token = 'variable' },
]

[language_server.biome]
filetypes = ['typescript', 'javascript', 'json']
roots = ['deno.json', '.git']
command = 'biome'
args = ['lsp-proxy']

[language_server.tsserver]
filetypes = ['typescript', 'javascript']
roots = ['deno.json', '.git']
command = 'sh'
args = ['-c', '''
set -euf

top=''
tt='ts'

for _ in $(seq 10); do
	if [ -f "${top}deno.json" ]; then
		tt='deno'
		break
	elif [ -f "${top}package.json" ]; then
		tt='ts'
		break
	else
		top="../${top}"
	fi
done

if [ "$tt" = 'deno' ]; then
	exec deno lsp
else
	exec typescript-language-server --stdio
fi
''']
[language_server.tsserver.settings.deno]
enable = true
lint = true

[language_server.rust]
filetypes = ['rust']
roots = ['Cargo.toml', '.git']
command = 'rust-analyzer'
settings_section = 'rust-analyzer'
[language_server.rust.settings.rust-analyzer]
check.command = 'clippy'


[language_server.haskell]
filetypes = ['haskell']
roots = ['Setup.hs', 'stack.yaml', '*.cabal', '.git']
command = 'haskell-language-server-wrapper'
args = ['--lsp', '-d', '--log-file', '/tmp/kak-lsp/xnuk/haskell-log']
settings_section = 'haskell'

[language_server.haskell.settings.haskell]
haskell.formattingProvider = 'ormolu'
haskell.plugin.ormolu.config.external = true

[language_server.json]
filetypes = ['json']
roots = ['package.json']
command = 'vscode-json-languageserver'
args = ['--stdio']

[language_server.yaml]
filetypes = ['yaml']
roots = ['.git']
command = 'yaml-language-server'
args = ['--stdio']

[language_server.scss]
filetypes = ['scss']
roots = ['.git']
command = 'stylelint-lsp'
args = ['--stdio']

[language_server.crystal]
filetypes = ['crystal']
roots = ['.git', 'shard.yml', 'shard.yaml']
command = 'crystalline'
args = ['--stdio']

[language_server.python]
filetypes = ['python']
roots = ['requirements.txt', 'setup.py', 'setup.cfg', 'pyproject.toml', '.git']

# # try this on mypy v0.981
# command = 'pylsp'
# settings_section = '_'
# [language_server.python.settings._.pylsp.plugins]
# pycodestyle.enabled = true
# yapf.enabled = false
# mypy.enabled = true
# mypy.live_mode = true
# mypy.strict = true

command = 'pyright-langserver'
args = ['--stdio']

[language_server.java]
filetypes = ['java']
roots = ['.git', 'pom.xml']
command = 'java-language-server'

[language_server.toml]
filetypes = ['toml']
roots = ['.git']
command = 'taplo'
args = ['lsp', 'stdio']

[language_server.terraform]
filetypes = ['terraform', 'tf']
command = 'terraform-ls'
args = ['serve']
roots = ['.git']
