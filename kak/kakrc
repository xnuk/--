try %{ source "%val{config}/plugins/plug/plug.kak" } catch %{
	eval %sh{
		curl --silent -L https://xnuk.github.io/plug.kak
	}
}
require-module plug

plug xnuk:plug.kak

plug! xnuk:graphviz.kak

plug github:alexherbo2/surround.kak %{
	map global normal \' ': enter-surround-mode<ret>'
	map global normal q ': enter-surround-mode<ret>'
	map global normal ( ': enter-surround-mode<ret>('
}

plug xnuk:search-highlighter.kak %{
	search-highlighter-enable
	set-face global Search rgb:000000,rgb:FFFF00+F
}

plug xnuk:auto-pairs.kak %{
	auto-pairs-enable
}

plug github:occivink/kakoune-expand %{
	map global normal = ': expand<ret>'
	declare-option str expand_commands %{
		expand-impl %{ exec <a-a>b }
		expand-impl %{ exec <a-a>B }
		expand-impl %{ exec <a-i><a-w> }
		expand-impl %{ exec "<a-i>c[({[=\s]','[\]}):;\s]<ret>" }
		expand-impl %{ exec '<a-i>c[({[=\s]","[\]}):;\s]<ret>' }
		expand-impl %{ exec <a-a>r }
		expand-impl %{ exec <a-i>i }
		expand-impl %{ exec <a-i>p }
		expand-impl %{ exec '<a-:><a-;>k<a-K>^$<ret><a-i>i' } # previous indent level (upward)
		expand-impl %{ exec '<a-:>j<a-K>^$<ret><a-i>i' }      # previous indent level (downward)
	}
}

plug github:Delapouite/kakoune-goto-file %{
	map global goto <a-f> f
	map global goto f '<esc>: try %{ execute-keys gF } catch goto-file<ret>' -docstring 'file'
}

plug github:occivink/kakoune-sudo-write %{
	alias global sw sudo-write
}

# shortcut plugins that doesn't care about remapping
# can be turned off with auto-percent-unmap
plug github:Delapouite/kakoune-auto-percent %{
	map global normal s ': if-cursor s(?i)\Q s(?i)\Q<ret>'
}

plug! https://gitlab.com/Screwtapello/kakoune-shellcheck

plug github:TeddyDD/kakoune-edit-or-dir %{
	unalias global e edit
	alias global e edit-or-dir
}

plug github:occivink/kakoune-filetree

plug github:andreyorst/fzf.kak %{
	require-module fzf-file
	set global fzf_highlight_command bat
	set global fzf_file_command fd
}

plug https://gitlab.com/Screwtapello/kakoune-inc-dec %{
	map global normal <c-a> ': inc-dec-modify-numbers + 1<ret>'
	map global normal <c-x> ': inc-dec-modify-numbers - 1<ret>'
}

# plug https://gitlab.com/Screwtapello/kakoune-state-save %{
# 	hook global KakBegin .* %{
# 		state-save-reg-load colon
# 		state-save-reg-load pipe
# 		state-save-reg-load slash
# 	}

# 	define-command -hidden state-save-regs %{
# 		state-save-reg-save colon
# 		state-save-reg-save pipe
# 		state-save-reg-save slash
# 	}

# 	hook global KakEnd .* state-save-regs
# 	hook global NormalIdle .* state-save-regs
# }

map global normal b ':buffer '

define-command buffer-jump -params 2 -buffer-completion %{
	buffer %arg{1}
	execute-keys "%arg{2}gx"
}

define-command fzf-real-buffer-file-search %{
	declare-option -hidden str fzf_real_patho %sh{mktemp}
	evaluate-commands -draft -buffer * %{
		execute-keys -draft "%%<a-|> nl -nrn -ba | sed -E 's|^ *|%val{bufname}\t|' >> %opt{fzf_real_patho}<ret>"
	}
	fzf -kak-cmd 'eval buffer-jump' -items-cmd "cat %opt{fzf_real_patho}" -fzf-args %[ \
		+m --tiebreak=index --prompt="Lines>" --ansi --extended --delimiter="\t" --nth=3.. --tabstop=1 --layout=reverse-list \
	] -filter 'cut -f1-2' -post-action %[
		nop %sh{rm "$kak_opt_fzf_real_patho"}
	]
}

set-option -add global ui_options terminal_status_on_top=yes
set-option -add global ui_options terminal_assistant=cat

define-command combined-space -docstring 'try ; first, then <space>.' %{
	execute-keys %sh{
		printf '%s' "$kak_selections_length" | sed -nE '
		/[02-9]|11/{s/^.*$/;/p;q};
		/1 1/{s/^.*$/,/p;q};
		s/^.*$/<space>/p
		'
	}
}

define-command no-fail-selection-trim -docstring 'It is _ but no fail' %{
	try 'execute-keys _' catch ''
}

define-command ctrl-d %{ execute-keys -save-regs '' %sh{
	if [ "$(printf '%s' "$kak_selection" | wc -m)" -eq 1 ]; then
		echo '<a-i>w*'
	else
		echo '*<s-n>'
	fi
}}

define-command comment-prefer-block %{
	try %{
		comment-block
		execute-keys <a-x>
	} catch comment-line
}

define-command comment-prefer-line %{
	try comment-line catch %{
		comment-block
		execute-keys <a-x>
	}
}

define-command extend-line %{execute-keys %sh{
	should_select_line=$(
		printf '%s' "$kak_selections_length" | sed -nE '/( |^)1($| )/p'
	)
	if [ -n "$should_select_line" ]; then
		printf 'x'
	else
		printf 'xJx'
	fi
}}

define-command to-spaces 'execute-keys @'
define-command to-tabs   'execute-keys <a-@>'

define-command lsp-try-add-signature -docstring 'try add signature' %{
	try %{ lsp-code-action 'add signature' } catch lsp-code-actions
}

# How dare you guise use spaces
set-option global indentwidth 0
set-option global aligntab false
set-option global tabstop 4

# who did dat
hook global WinSetOption aligntab=true %{
	set-option buffer aligntab false
}

colorscheme tomorrow-night

# I love Akamig
unset-face global Default
unset-face global BufferPadding

add-highlighter global/ number-lines -hlcursor -separator " " -min-digits 3

# this is a magic

map global normal n 'b: no-fail-selection-trim<ret>'
map global normal <a-n> h
map global normal N B
map global normal <a-N> H
map global normal e j
map global normal <a-e> ]p
map global normal <a-E> }p
map global normal E J
map global normal <a-E> }p
map global normal i 'e: no-fail-selection-trim<ret>'
map global normal <a-i> l
map global normal I E
map global normal <a-I> L
map global normal u k
map global normal <a-u> [p
map global normal <a-U> {p
map global normal U K
map global normal <a-U> {p
map global normal k <a-J>
map global normal v ': extend-line<ret>[p]p'
map global normal V ': extend-line<ret>{p}p'
map global normal x ': extend-line<ret>'
map global normal r ';r'
map global normal a ': no-fail-selection-trim<ret>a'

map global insert <a-backspace> '<a-;>b<a-;>_<a-;>d'
map global insert <a-n> '<a-;>b<a-;>;'
map global insert <a-i> '<a-;>e<a-;>;'
map global insert <a-u> '<a-;>k'
map global insert <a-e> '<a-;>j'
map global insert <c-v> '<c-r>"'

map global normal <c-n> ': new<ret>'
map global normal <c-d> ': ctrl-d<ret>'
map global normal <c-w> ': delete-buffer<ret>'

# macro is rarely used
map global normal @ q

map global normal g t
map global normal t g
map global normal G T
map global normal T G

map global normal h i
map global normal H I
map global normal \; :
map global normal : '<a-;>'

# # Not frequently using
# map global normal L <a-i>
# map global normal l <a-a>

map global normal l ': enter-user-mode lsp<ret>'
map global normal L ': lsp-code-actions<ret>'

# jump
map global normal j <c-o>
map global normal J <tab>

map global normal <tab> \>
map global normal <s-tab> \<

map global normal <space> ': combined-space<ret>' -docstring 'reduce selections to their cursor'
map global normal <backspace> u
map global goto <backspace> <esc>U -docstring 'redo'
map global normal '#' ': comment-prefer-line<ret>'
map global normal '^' ': comment-prefer-block<ret>'
map global insert '<a-f>' '<a-;>: comment-line<ret>'
map global goto l <a-\;>n -docstring 'next search pattern'
map global goto j <a-\;>:buffer-jump<ret> -docstring 'buffer jump'
map global goto k <a-\;>:buffer-previous<ret> -docstring 'buffer previous'
map global goto h <a-\;>:buffer-next<ret> -docstring 'buffer next'

map global goto n h -docstring 'line end'
map global goto e <esc><c-d>gc -docstring 'half page down'
map global goto i l -docstring 'line start'
map global goto u tvc -docstring 'half page up'
map global goto g k -docstring 'buffer top'
map global goto v j -docstring 'buffer bottom'

map global goto <ret> '<esc>: lsp-code-actions<ret>' -docstring 'lsp-code-actions'
map global normal <F2> ': lsp-rename-prompt<ret>' -docstring 'lsp-rename-prompt'

# Subline line
map global normal <c-l> <a-s>

map global insert <tab> <a-\;><gt>
map global insert <s-tab> <a-\;><lt>

# system paste
declare-option -hidden str paste_cmd %sh{
	if command -v pbpaste > /dev/null; then
		echo pbpaste
	elif command -v xsel > /dev/null; then
		echo xsel --clipboard
	elif command -v xclip > /dev/null; then
		echo xclip -out -sel clip
	elif command -v wl-paste > /dev/null; then
		echo wl-paste
	else
		echo false
	fi
}

# system copy
declare-option -hidden str copy_cmd %sh{
	if command -v clip.exe > /dev/null; then
		echo clip.exe '>' /dev/null '2>&1'
	elif command -v pbcopy > /dev/null; then
		echo pbcopy
	elif command -v wl-copy > /dev/null; then
		echo wl-copy '>' /dev/null '2>&1'
	else
		echo false
	fi
}

map global normal , ': enter-user-mode user<ret>'
map global user p %sh{echo "<a-!> $kak_opt_paste_cmd<ret>"} -docstring 'paste after from system clipboard'
map global user P %sh{echo "! $kak_opt_paste_cmd<ret>"}     -docstring 'paste before from system clipboard'
map global user y %sh{echo "<a-|> $kak_opt_copy_cmd<ret>"}  -docstring 'copy to system clipboard'

# tmux int.
declare-user-mode tmux
map global normal w ': enter-user-mode tmux<ret>'
map global tmux n '! tmux select-pane -L<ret>' -docstring 'goto pane left'
map global tmux e '! tmux select-pane -D<ret>' -docstring 'goto pane down'
map global tmux u '! tmux select-pane -U<ret>' -docstring 'goto pane up'
map global tmux i '! tmux select-pane -R<ret>' -docstring 'goto pane right'
map global tmux b '! tmux break-pane<ret>' -docstring 'break pane'
map global tmux a '! tmux previous-window<ret>' -docstring 'window: goto left'
map global tmux s '! tmux next-window<ret>' -docstring 'window: goto right'
map global tmux r ': prompt %{new window name } %{nop %sh{! tmux rename-window "$kak_text"}}<ret>' -docstring 'window: rename'
map global tmux v '! tmux select-layout even-vertical<ret>' -docstring 'layout: even-vertical'
map global tmux h '! tmux select-layout even-horizontal<ret>' -docstring 'layout: even-horizontal'
map global tmux V '! tmux select-layout main-vertical<ret>' -docstring 'layout: main-vertical'
map global tmux H '! tmux select-layout main-horizontal<ret>' -docstring 'layout: main-horizontal'
map global tmux <space> '! tmux select-layout tiled<ret>' -docstring 'layout: tiled'

set global incsearch true

# kak-lsp - bring your own kak-lsp
eval %sh{kak-lsp --kakoune -s "$kak_session" --config "$kak_config/kak-lsp.toml"}

set global lsp_hover_anchor true
set global lsp_hover_max_lines 10
set global lsp_auto_highlight_references true

lsp-auto-hover-enable
# lsp-auto-signature-help-enable
lsp-stop-on-exit-enable

lsp-enable

define-command -override -hidden lsp-show-error -params 1 %{
	echo -debug "kak-lsp:" %arg{1}
}


# Use tab for both indenting and completion
hook global InsertCompletionShow .* %{
	try %{
		execute-keys -draft 'h<a-K>\h<ret>'
		map window insert <tab> <c-n>
		map window insert <s-tab> <c-p>
	}
}

hook global InsertCompletionHide .* %{
	unmap window insert <tab> <c-n>
	unmap window insert <s-tab> <c-p>
}

hook global BufCreate .* %{
	try editorconfig-load
	try modeline-parse
}

hook global WinSetOption filetype=(typescript|javascript) %{
	set buffer autoreload yes
	set buffer formatcmd %sh{
		echo cat '<<' EOF '|' dash '2>/dev/null >/dev/null &'
		echo prettier --write "$(realpath "$kak_buffile")"
		echo yarny eslint --fix "$(realpath "$kak_buffile")"
		echo EOF
		echo cat
	}

	set buffer lintcmd %sh{
		format="--format=$HOME/.npm/global-packages/lib/node_modules/eslint-formatter-kakoune"
		ignore_last="ruby -e 'system *ARGV[0...-1]'"
		printf "%s yarny %s %s %s" "$ignore_last" eslint "$format" "$kak_buffile"
	}

	hook buffer BufWritePost .*\.(tsx?|jsx?) format
	map global insert <a-ret> '<a-;>x<a-;>| emmet<ret>'
}

hook global WinSetOption filetype=(html|less|json|toml|yaml|css|sass|ini) %{
	set buffer autoreload yes
	set buffer extra_word_chars '_' '-'
}

hook global WinSetOption filetype=(css|scss|sass|html|less|json) %{
	set buffer autoreload yes
	set buffer extra_word_chars '_' '-'
	set buffer formatcmd %sh{
		echo cat '<<' EOF '|' dash '2>/dev/null >/dev/null & cat'
		echo prettier --write "$(realpath "$kak_buffile")"
		echo EOF
	}
	hook buffer BufWritePost .* format
	map global insert <a-ret> '<a-;>x<a-;>| emmet<ret>'

}

hook global WinSetOption filetype=rust %{
	map buffer normal <ret> ': lsp-signature-help<ret>'
	hook window -group rust-inlay-hints BufWritePost .* rust-analyzer-inlay-hints
	hook -once -always window WinSetOption filetype=.* %{
		remove-hooks window rust-inlay-hints
	}
}

hook global WinSetOption filetype=(haskell|rust) %{
	hook buffer BufWritePost .* lsp-formatting-sync
}

hook global WinSetOption filetype=(java) %{
	hook buffer BufWritePre .* lsp-formatting-sync
}

hook global WinSetOption filetype=python %{
	set buffer formatcmd 'black --preview - | unexpand --tabs=4 --first-only'
	set buffer lintcmd %sh{
		format='%(path)s:%(row)d:%(col)d: error: %(text)s'
		ignore_last="ruby -e 'system *ARGV[0...-1]'"
		printf "%s pycodestyle --format='%s' %s" "$ignore_last" "$format" "$kak_buffile"
	}
	hook buffer BufWritePost .* format
}

hook global WinSetOption filetype=(kak|sh) %{
	hook buffer ModeChange .*:insert:normal %{try lint}
}

hook global WinSetOption filetype=(typescript|rust) %{
	hook window -group semantic-tokens BufReload .* lsp-semantic-tokens
	hook window -group semantic-tokens NormalIdle .* lsp-semantic-tokens
	hook window -group semantic-tokens InsertIdle .* lsp-semantic-tokens
	hook -once -always window WinSetOption filetype=.* %{
		remove-hooks window semantic-tokens
	}
}

hook global WinSetOption filetype=(asciidoc|markdown) %{
	autowrap-enable
	add-highlighter buffer/ wrap
}

hook global WinSetOption filetype=git-rebase %{
	map buffer normal <ret> '<a-x>s^[a-z]+ ([a-f0-9]+) <ret>: git show <c-r>1<ret>'
	map buffer normal <tab> '<a-x>s^[a-z]+ ([a-f0-9]+) <ret>: git show <c-r>1<ret>: buffer-previous<ret>'
}

set-face global Whitespace rgb:333333,default
add-highlighter global/ show-whitespaces -spc " " -tab "▏" -lf " "

add-highlighter global/ column 79 default,rgb:404040
add-highlighter global/ column 80 default,rgb:404040
add-highlighter global/ column 81 default,rgb:404040
add-highlighter global/ column 119 default,rgb:404040
add-highlighter global/ column 120 default,rgb:404040
add-highlighter global/ column 121 default,rgb:404040

hook global ModeChange .*:normal:insert %{
	set-face buffer Default rgb:D8D8D8,rgb:0F0F0F
	try %{
		add-highlighter buffer/ number-lines -hlcursor -separator " " -min-digits 3
		add-highlighter buffer/ line '%val{cursor_line}' default,rgb:404040
	}
}

hook global ModeChange .*:insert:normal %{
	unset-face buffer Default
	remove-highlighter buffer/number-lines_-hlcursor_-separator_\ _-min-digits_3
	remove-highlighter buffer/line_%val{cursor_line}_default,rgb:404040
}

hook global NormalKey '[ㄱ-힣]' %{
	nop %sh{ kime-to english }
}

# why
hook global BufCreate .*[.](less|rasi) %{
	set-option buffer filetype scss
}

hook global BufCreate .*[.](mjs|cjs) %{
	set-option buffer filetype javascript
}

hook global BufCreate .*[.](conf|gitignore|local) %{
	add-highlighter buffer/ regex '^#[^\n]*$' 0:comment
}

hook global BufCreate .*[.](xlf|xsl|xml|xslt) %{
	set-option buffer filetype 'xml'
	map global insert <a-ret> '<a-;>x<a-;>| emmet<ret>'
}

hook global BufCreate .*[.](sway) %{
	set-option buffer filetype 'i3'
}

declare-option str modeline_git_branch
set global modeline_git_branch ''

define-command -params 1 update-modeline %{
	set %arg{1} modelinefmt '%val{bufname} L%val{cursor_line}#%val{cursor_char_column} %opt{modeline_git_branch}{{context_info}} {{mode_info}} - %val{session}'
}

define-command -hidden git-show-diff-shut-up %{
	eval %sh{
		if [ -e "$kak_buffile" ]; then
			printf "try 'git show-diff'"
		else
			printf nop
		fi
	}
}

hook global WinCreate .* %{
	hook window NormalIdle .* %{
		eval %sh{
			branch=$(cd "$(dirname "$kak_buffile")" && git rev-parse --abbrev-ref HEAD 2>/dev/null)
			if [ -n "$branch" ]; then
				printf 'set window modeline_git_branch "[%%{%s}]"\n' "$branch"
			else
				printf 'set window modeline_git_branch ""\n'
			fi
		}

		update-modeline window
	}

	git-show-diff-shut-up
}

hook global BufWritePost .* %{
	git-show-diff-shut-up
}

hook global NormalIdle .* %{
	git-show-diff-shut-up
}

hook global BufCreate \*scratch\* %{
	execute-keys '%d! ls<ret>'
	map buffer normal <ret> 'x_: e %val{selection}<ret>'
}

# diff highlight
add-highlighter global/ regex '^[>|<=]{7,}( [^\r\n]*)?' 0:white,red 1:bright-black,black+i
